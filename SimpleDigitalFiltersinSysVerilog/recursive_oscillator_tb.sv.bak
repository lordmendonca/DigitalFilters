`timescale 1ns/1ps
`define HALF_CLOCK_PERIOD 10
`define RESET_PERIOD      40
`define TEST_PERIOD       400
`define SIM_DURATION      65000


module recursive_oscillator_tb();

logic signed [15:0] d_tb, y_sin_tb, y_cos_tb, w_n_tb;

//clock generation
	logic clk_tb = 0;
	initial
		begin:clock_generation
			clk_tb = 1'b0;
			forever
				begin
					#`HALF_CLOCK_PERIOD clk_tb = ~clk_tb;
				end
		end:clock_generation
		
//testbench scheduler
	logic reset_n_tb = 1'b0;
	initial
		begin:testbench_scheduler
			reset_n_tb = 1'b0;
			#`RESET_PERIOD
			reset_n_tb = 1'b1;
			
			//ascii_string = "unit response";			
			d_tb = 16'b0111111111111111;
			#`TEST_PERIOD
			reset_n_tb = 1'b0;
			#`RESET_PERIOD
			reset_n_tb = 1'b1;
			d_tb = 16'b0000000000000000;
			#`SIM_DURATION
			$stop();
		end:testbench_scheduler

//module instance
recursive_oscillator inst_dut(.clk(clk_tb), .reset_n(reset_n_tb),
							.d(d_tb),.y_sin(y_sin_tb), .y_cos(y_cos_tb), .w_n(w_n_tb));
							
endmodule 